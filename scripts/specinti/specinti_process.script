# Python program for CCDciel
# see: https://www.ap-i.net/ccdciel/en/documentation/jsonrpc_reference
#
# Use specinti_config for any settings
#

from ccdciel import ccdciel
import sys
import os
import platform
import glob
import shutil
import subprocess
import argparse
from configparser import ConfigParser
from datetime import datetime

# read parameters
parser=argparse.ArgumentParser(description="This optional parameters overide the default set in specinti_config")
parser.add_argument('--object', '-o', help='the name of the object to process, default is the current object in capture tab')
parser.add_argument('--sourcedir', '-s', help='the source directory where the object files are, default is the capture directory')
grouparchive=parser.add_mutually_exclusive_group()
grouparchive.add_argument('--archive', help='move the original files to the archive directory', action="store_true")
grouparchive.add_argument('--noarchive', help='do not move the original files to the archive directory', action="store_true")
parser.add_argument('--basedir', '-w', help='the base directory for processing')
parser.add_argument('--config', '-c',  help='the specinti configuration name')
parser.add_argument('--calib', '-n', help='postfix for calibration files')
parser.add_argument('--flat', '-f', help='flat image prefix')
parser.add_argument('--flatpostfix', '-t', help='flat image postfix')
parser.add_argument('--saveflat', help='save the resulting master flat _flat for further use', action="store_true")
parser.add_argument('--dark', '-d', help='dark image prefix')
parser.add_argument('--bias', '-b', help='bias image prefix')
args=parser.parse_args()
capturedir = args.sourcedir
objname = args.object
base_directory = args.basedir
specinti_config = args.config
specinti_calib_postfix = args.calib
specinti_flat = args.flat
specinti_flat_postfix = args.flatpostfix
specinti_dark = args.dark
specinti_offset = args.bias

# read the configuration file
scriptdir = os.path.dirname(os.path.abspath(sys.argv[0]))
parser = ConfigParser()
parser.read(os.path.join(scriptdir,'specinti_config.script')) 
if specinti_config == None:
   specinti_config = parser['settings']['specinti_config']
if specinti_calib_postfix == None:
   specinti_calib_postfix = parser['settings']['specinti_calib_postfix']
if specinti_flat == None:
   specinti_flat = parser['settings'].get('specinti_flat','')
if specinti_flat_postfix == None:
   specinti_flat_postfix  = parser['settings'].get('specinti_flat_postfix','-----')
if specinti_dark == None:
   specinti_dark = parser['settings']['specinti_dark']
if specinti_offset == None:
   specinti_offset = parser['settings']['specinti_offset']
if base_directory == None:
   base_directory = parser['settings']['base_directory']
   
if (not args.archive) and (not args.noarchive):
   # no parameter, use config value
   archive = parser['settings'].getboolean('archive_original',True)
else:
   archive = args.archive

specinti_progdir = parser['settings']['specinti_progdir']
specinti_prog    = parser['settings']['specinti_prog']
show_window      = parser['settings'].getboolean('show_window',True)
keep_window      = parser['settings'].getboolean('keep_window',False)
wine_prefix      = parser['settings'].get('wine_prefix','')
linux_terminal   = parser['settings'].get('linux_terminal','')  

if base_directory == '':
   print('Please set the base directory for processing')
   sys.exit(1)   

# set other directories under base_directory
work=os.path.join(base_directory,'work')              # temporay directory to process the files, everything will be deleted!
resp=os.path.join(base_directory,'response')          # reference files, instrumental response
dark=os.path.join(base_directory,'dark')              # bias and dark files
flat=os.path.join(base_directory,'flat')              # tungsten flat files
result=os.path.join(base_directory,'result')          # directory to store the processed spectra
logfile=os.path.join(base_directory,'processing.log') # a summary log of the processed object

if args.saveflat:
   saveflat=flat
else:
   saveflat='none'

if archive:
   archivedir=os.path.join(base_directory,'archive')     # directory to archive the already processed capture
else:
   archivedir='none'

# check all the directories exist
def CheckDirectory(path):
    if not os.path.exists(path):
        print('Create directory '+path)
        os.makedirs(path)

CheckDirectory(base_directory)
CheckDirectory(work)
CheckDirectory(resp)
CheckDirectory(dark)
CheckDirectory(flat)
CheckDirectory(result)
if archive:
   CheckDirectory(archivedir)

# check mandatory directories are not empty
def IsDirectoryEmpty(path):
    with os.scandir(path) as list:
       if any(list):
          return False
       else:
          return True 

if IsDirectoryEmpty(resp) or IsDirectoryEmpty(dark):
     print('Please copy response,dark,offset,flat files to the corresponding directories')
     sys.exit(1) 
    
# ccdciel capture directory with object and neon images
if capturedir == None:
   lastfn = ccdciel('Capture_getLastfilename')['result']
   if lastfn == '':
      capturedir=ccdciel('CaptureDir')['result']
   else:
      capturedir = os.path.dirname(lastfn)
   if capturedir == '':
      print('Capture directory not set in CCDciel')
      sys.exit(1)

# current object name to process
if objname == None:
   objname=ccdciel('Capture_getobjectname')['result']

objfile=objname.replace(' ','')
if objfile == '':
   print('Not object name set in CCDciel Capture tab')
   sys.exit(1)   

print('Process '+objname)

# cleanup work dir
files = glob.glob((os.path.join(work,'*')))
for f in files:
    os.remove(f)

# copy capture to work dir
print ('Process files from ' + capturedir)
# try files without space
files = glob.glob((os.path.join(capturedir,objfile+'*')))
nfiles = 0
for f in files:
    shutil.copy(f, work)
    nfiles+=1
if nfiles == 0:
    # no file, try files with space
    objfile = objname
    files = glob.glob((os.path.join(capturedir,objname+'*')))
    for f in files:
       shutil.copy(f, work)

# copy instrumental response to work dir
files = glob.glob((os.path.join(resp,'*')))
for f in files:
    shutil.copy(f, work)

# copy dark,offset to work dir
files = glob.glob((os.path.join(dark,'*')))
for f in files:
    shutil.copy(f, work)

# copy flat to work dir
files = glob.glob((os.path.join(flat,'*')))
for f in files:
    shutil.copy(f, work)

# count files
nobj=0
ncal=0
nobjflat=0
nflat=0
ndark=0
nbias=0
files = glob.glob((os.path.join(work,'*')))
for f in files:
    if glob.fnmatch.fnmatch(f, '*'+objfile+'-*'):
        nobj+=1
    if glob.fnmatch.fnmatch(f, '*'+objfile+specinti_calib_postfix+'*'):
        ncal+=1
    if glob.fnmatch.fnmatch(f, '*'+objfile+specinti_flat_postfix+'*'):
        nobjflat+=1
    if (specinti_flat[0] != '_') and glob.fnmatch.fnmatch(f, '*'+specinti_flat+'*'):
        nflat+=1
    if (specinti_dark[0] != '_') and glob.fnmatch.fnmatch(f, '*'+specinti_dark+'*'):
        ndark+=1
    if (specinti_offset[0] != '_') and glob.fnmatch.fnmatch(f, '*'+specinti_offset+'*'):
        nbias+=1

if nobj == 0:
   print('No file to process for '+objfile+' in '+capturedir)
   sys.exit(1)

if archive:
   # archive by object name and date/time
   d = datetime.now().strftime("%Y%m%d_%H%M%S")
   archivedir=os.path.join(archivedir,objfile+'_'+d)
   CheckDirectory(archivedir)

# make observation file
with open(os.path.join(work,'obj.yaml'), 'w') as of:
    of.write(objname+':\n')
    of.write('- '+objname+'\n')
    of.write('- '+objfile+'-\n')
    of.write('- '+str(nobj)+'\n')
    of.write('- '+objfile+specinti_calib_postfix+'\n')
    of.write('- '+str(ncal)+'\n')
    if nobjflat>0:
      of.write('- '+objfile+specinti_flat_postfix+'\n')
      of.write('- '+str(nobjflat)+'\n')
    else:  
      of.write('- '+specinti_flat+'\n')
      of.write('- '+str(nflat)+'\n')
    of.write('- '+specinti_dark+'\n')
    of.write('- '+str(ndark)+'\n')
    of.write('- '+specinti_offset+'\n')
    of.write('- '+str(nbias)+'\n')
    of.write('- None\n')
    of.write('- 0\n')

# Update configuration file for path and batch name
f=os.path.join(specinti_progdir,'_configuration',specinti_config+'.yaml')
with open(f, 'r', encoding = 'utf-8') as file :
    buf = file.read()
row = buf.split('\n')
for i in range (len(row)):
    if 'working_path:' in row[i] :
       row[i]='working_path: ' + work
    elif  'batch_name:' in row[i] :
       row[i]='batch_name: ' +  'obj'
buf = '\n'.join(row)
with open(f , 'w', encoding = 'utf-8') as file:
    file.write(buf)

# run the script to call specinti and process the result
if platform.system() == 'Windows' :
    specinticmd=os.path.join(scriptdir,'specinti_process.cmd') 
    if keep_window:
       copt='/K'
    else:
       copt='/C'
    if show_window:
       subprocess.Popen(['start','cmd.exe',copt,specinticmd, specinti_progdir, specinti_prog, specinti_config, objfile, work, capturedir, result, archivedir, saveflat, logfile],shell=True)
    else:
       subprocess.Popen(['start','/min','cmd.exe',copt,specinticmd, specinti_progdir, specinti_prog, specinti_config, objfile, work, capturedir, result, archivedir, saveflat, logfile],shell=True)
else:
    specinticmd=os.path.join(scriptdir,'specinti_process.sh')
    if linux_terminal == '':
       subprocess.Popen(['/usr/bin/bash', specinticmd, specinti_progdir, specinti_prog, specinti_config, objfile, work, capturedir, result, archivedir, saveflat, logfile, wine_prefix])
    else:
       term=linux_terminal.split(' ')
       subprocess.Popen(term+[specinticmd, specinti_progdir, specinti_prog, specinti_config, objfile, work, capturedir, result, archivedir, saveflat, logfile, wine_prefix])






